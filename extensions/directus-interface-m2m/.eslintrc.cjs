const { readGitignoreFiles } = require('eslint-gitignore');
module.exports = {
  env: {
    node: true,
    es2021: true,
  },
  root: true,
  extends: [
    'eslint:recommended',
    'plugin:@typescript-eslint/recommended',
    'plugin:@typescript-eslint/recommended-requiring-type-checking',

    'prettier',
  ],
  overrides: [
    {
      files: ['*.ts'],
      rules: {
        'no-undef': 'off',
      },
    },
  ],
  parser: 'vue-eslint-parser',
  parserOptions: {
    parser: '@typescript-eslint/parser',
    ecmaVersion: 'latest',
    sourceType: 'module',
    project: './tsconfig.json',
  },
  plugins: ['@typescript-eslint', 'vitest'],
  rules: {
    '@typescript-eslint/array-type': ['error', { default: 'array-simple' }],

    // Override some recommended
    '@typescript-eslint/require-await': 'off',
    '@typescript-eslint/no-unsafe-member-access': 'off', // vue has problems sometimes
    '@typescript-eslint/no-unsafe-assignment': 'off', // vue has problems sometimes (ref<?>())
    '@typescript-eslint/no-for-in-array': 'off',
    '@typescript-eslint/no-unsafe-call': 'off', // libraries may break with this
    indent: 'off', // TS incompatibility

    '@typescript-eslint/naming-convention': [
      'error',
      {
        selector: ['enum', 'enumMember'],
        format: ['StrictPascalCase'],
        custom: {
          regex: '([Tt]ype|[Ee]num)$',
          match: false,
        },
      },
      {
        selector: 'variable',
        types: ['boolean'],
        format: ['PascalCase'], // this is camelCase when you merge the prefix
        prefix: ['is', 'should', 'has', 'can', 'did', 'will'],
      },
    ],
    'linebreak-style': ['error', 'unix'],
    semi: ['error', 'always'],
    curly: ['error', 'multi-or-nest', 'consistent'],
    'dot-notation': 'error',
    'func-names': ['error', 'as-needed'],
    'func-name-matching': ['error'],
    'func-style': ['error', 'declaration', { allowArrowFunctions: true }],
    'arrow-body-style': ['error', 'as-needed'],
    'max-depth': ['error', 5],
    'max-params': ['error', 5],
    'multiline-comment-style': ['warn', 'starred-block'],
    'no-array-constructor': 'error',
    'no-new-object': 'error',
    'no-new-wrappers': 'error',
    'no-caller': 'error',
    'no-else-return': ['error', { allowElseIf: false }],
    'no-implicit-coercion': 'error',
    'no-implicit-globals': 'error',
    'no-lonely-if': 'error',
    'no-loop-func': 'warn',
    '@typescript-eslint/no-magic-numbers': [
      'error',
      {
        ignore: [-1, 0, 1],
        ignoreDefaultValues: true,
        ignoreClassFieldInitialValues: true,
        ignoreArrayIndexes: true,
        ignoreEnums: true,
      },
    ],
    'no-multi-assign': 'error',
    'no-multi-str': 'error',
    'no-param-reassign': 'warn',
    'no-proto': 'error',
    'no-return-assign': 'error',
    'no-shadow': 'off',
    '@typescript-eslint/no-shadow': [
      'error',
      {
        builtinGlobals: true,
        allow: ['done', 'cb', 'reject', 'resolve', 'callback', 'Plugin', 'name'],
      },
    ],
    'no-unneeded-ternary': ['error', { defaultAssignment: false }],
    'object-shorthand': ['error', 'always', { avoidQuotes: true, avoidExplicitReturnArrows: true }],
    'one-var': ['error', 'never'],
    'prefer-named-capture-group': 'warn',
    'prefer-numeric-literals': 'error',
    '@typescript-eslint/consistent-generic-constructors': 'error',
    '@typescript-eslint/consistent-indexed-object-style': ['error', 'record'],
    '@typescript-eslint/consistent-type-assertions': [
      'error',
      { assertionStyle: 'as', objectLiteralTypeAssertions: 'never' },
    ],
    '@typescript-eslint/consistent-type-definitions': ['error', 'interface'],
    '@typescript-eslint/consistent-type-exports': [
      'error',
      { fixMixedExportsWithInlineTypeSpecifier: true },
    ],
    '@typescript-eslint/consistent-type-imports': ['error', { fixStyle: 'separate-type-imports' }],
    '@typescript-eslint/explicit-function-return-type': 'off',
    '@typescript-eslint/explicit-module-boundary-types': [
      'error',
      {
        allowArgumentsExplicitlyTypedAsAny: true,
        allowDirectConstAssertionInArrowFunctions: true,
        allowHigherOrderFunctions: true,
        allowTypedFunctionExpressions: true,
      },
    ],
    '@typescript-eslint/method-signature-style': ['error', 'property'],
    '@typescript-eslint/no-explicit-any': 'warn',
    '@typescript-eslint/no-base-to-string': ['warn'],
    '@typescript-eslint/no-confusing-non-null-assertion': ['error'],
    '@typescript-eslint/no-confusing-void-expression': ['error', { ignoreVoidOperator: true }],
    '@typescript-eslint/no-duplicate-enum-values': 'warn',
    '@typescript-eslint/no-duplicate-type-constituents': 'error',
    '@typescript-eslint/no-extraneous-class': 'error',
    '@typescript-eslint/no-invalid-void-type': 'error',
    '@typescript-eslint/no-mixed-enums': 'error',
    '@typescript-eslint/no-non-null-asserted-nullish-coalescing': 'error',
    '@typescript-eslint/no-redundant-type-constituents': 'error',
    '@typescript-eslint/no-require-imports': 'error',
    '@typescript-eslint/no-unnecessary-boolean-literal-compare': 'error',
    '@typescript-eslint/no-unnecessary-condition': ['error', { allowConstantLoopConditions: true }],
    '@typescript-eslint/non-nullable-type-assertion-style': 'error',
    '@typescript-eslint/parameter-properties': [
      'error',
      {
        prefer: 'parameter-property',
      },
    ],
    '@typescript-eslint/prefer-for-of': 'error',
    '@typescript-eslint/prefer-function-type': 'error',
    '@typescript-eslint/prefer-includes': 'error',
    '@typescript-eslint/prefer-nullish-coalescing': 'error',
    '@typescript-eslint/prefer-optional-chain': 'error',
    '@typescript-eslint/prefer-reduce-type-parameter': 'error',
    '@typescript-eslint/prefer-return-this-type': 'error',
    '@typescript-eslint/prefer-string-starts-ends-with': 'error',
    '@typescript-eslint/prefer-ts-expect-error': 'error',
    '@typescript-eslint/promise-function-async': 'error',
    '@typescript-eslint/require-array-sort-compare': ['error', { ignoreStringArrays: true }],
    '@typescript-eslint/strict-boolean-expressions': 'warn',
    '@typescript-eslint/switch-exhaustiveness-check': 'error',

    // Vitest
    'vitest/consistent-test-it': [
      'error',
      {
        fn: 'test',
        withinDescribe: 'it',
      },
    ],
    'vitest/expect-expect': 'warn',
    'vitest/lower-case-title': 'off',
    'vitest/max-nested-describe': [
      'error',
      {
        max: 1,
      },
    ],
    'vitest/no-conditional-tests': 'error',
    'vitest/no-focused-tests': 'warn',
    'vitest/no-identical-title': 'error',
    'vitest/no-disabled-tests': 'warn',
  },
  ignorePatterns: [
    '**/*.md',
    'nuxt.config.ts',
    'package-lock.json',
    'package.json',
    'redirect.json',
    'tsconfig.json',
    '.eslintrc.cjs',
    '**/*.png',
    '**/*.pdf',
    '**/*.jpeg',
    '**/*.jpg',
    '**/*.webp',
    '**/*.ico',
    '**/*.eot',
    '**/*.ttf',
    '**/*.svg',
    '**/*.gz',
    '**/*.css',
    'patches/*',
    'src/assets/*',
    'docs/*',
    '.nuxt/*',
    '**/__snapshots__/*',
    'cloudformation/',
    'src/public/faceRecognitionModels/',
    'src/public/portals/',
    'azure-pipelines.yaml',
    ...readGitignoreFiles({ cwd: __dirname }),
  ],
};
